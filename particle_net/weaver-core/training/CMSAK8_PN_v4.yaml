selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   >-
   (np.abs(jet_eta)<2.4) & (jet_pt>110) & (jet_pt<1000)
   & ( (gen_pt>0))
#   & ( isUndefined!=1 )

test_time_selection:
   # (np.abs(jet_eta)<4.7) & (jet_pt>15) & (jet_pt<1000) & (event_no%7==0)
   # (np.abs(jet_eta)<4.7) & (jet_pt>15) & (jet_pt<1000)
   (np.abs(jet_eta)<2.4) & (jet_corr_pt>110) & (jet_corr_pt<1000)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand_mask: ak.ones_like(pfcand_etarel)
   sv_mask: ak.ones_like(sv_etarel)
   label_b:     (gen_pt>0) & (isB==1) & (isLeptonicB==0) & (isLeptonicB_C==0)
   label_bb:    (gen_pt>0) & (isBB==1)
   label_c:     (gen_pt>0) & (isB==0) & (isBB==0) & (isC==1)
   label_cc:    (gen_pt>0) & (isB==0) & (isBB==0) & (isCC==1)
   label_uds:   (gen_pt>0) & ((isUD==1) | (isS==1))
   label_g:     (gen_pt>0) & (isG==1)
#   label_undef: (gen_pt>0) & (isUndefined==1)
###   label_pu:    (gen_pt<=0)
   label_catB: (gen_pt>0) & (isLeptonicB==1)
   label_catC: (gen_pt>0) & (isLeptonicB_C==1)


preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf_points:
      length: 100
      vars: 
         - [pfcand_etarel, null]
         - [pfcand_phirel, null]
   pf_features:
      length: 100
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [pfcand_pt_log, 0.8, 0.7]
         - [pfcand_e_log, 1.2, 0.6]
         - [pfcand_etarel, null]
         - [pfcand_phirel, null]
         - [pfcand_abseta, 0.8, 1.2]
         - [pfcand_charge, null]
         - [pfcand_VTX_ass, 4, 0.3]
         - [pfcand_lostInnerHits, null]
         - [pfcand_normchi2, 5, 0.2]
         - [pfcand_quality, 0, 0.2]
         - [pfcand_dz, 0, 150]
         - [pfcand_dzsig, 0, 0.7]
         - [pfcand_dxy, 0, 270]
         - [pfcand_dxysig, 1.1]
         - [pfcand_btagEtaRel, 2.1, 0.5]
         - [pfcand_btagPtRatio, 0, 1]
         - [pfcand_btagPParRatio, 0, 1]
         - [pfcand_btagSip3dVal, 0, 90]
         - [pfcand_btagSip3dSig, 0, 0.5]
         - [pfcand_btagJetDistVal, 0, 50]
   pf_mask:
      length: 100
      vars: 
         - [pfcand_mask, null]
   sv_points:
      length: 7
      vars:
         - [sv_etarel, null]
         - [sv_phirel, null]
   sv_features:
      length: 7
      vars:
         - [sv_pt_log, 2.8, 0.8]
         - [sv_ptrel_log, 2.8, 0.8]
         - [sv_mass, 1.1, 0.6]
         - [sv_etarel, null]
         - [sv_phirel, null]
         - [sv_abseta, 0.8, 1.2]
         - [sv_ntracks, 3, 0.5]
         - [sv_normchi2, 0.7, 0.7]
         - [sv_dxy, 0.2, 0.6]
         - [sv_dxysig, 5, 0.03]
         - [sv_d3d, 0.35, 0.4]
         - [sv_d3dsig, 5, 0.03]
   sv_mask:
      length: 7
      vars:
         - [sv_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   ###value: [label_b, label_bb, label_c, label_cc, label_uds, label_g, label_undef, label_pu]
   #value: [label_b, label_bb, label_c, label_cc, label_uds, label_g, label_undef, label_catB, label_catC]
   value: [label_b, label_bb, label_c, label_cc, label_uds, label_g, label_catB, label_catC]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:
   - event_no
   - jet_no
   - jet_corr_pt
   - jet_pt
   - jet_eta
   - jet_phi
   - isB
   - isBB
   - isC
   - isCC
   - gen_pt
   - npfcands

monitor_variables:
   # - jet_pt
   # - jet_eta
   # - jet_hadronFlavour
   # - jet_partonFlavour
   # - jet_nBHadrons
   # - jet_nCHadrons
   # - gen_pt

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      # np.round(np.exp(np.linspace(np.log(15), np.log(1000), 9))).astype('int').tolist()
      # jet_pt: [15, 25, 43, 72, 122, 207, 350, 592, 1000]
      # np.round(np.exp(np.linspace(np.log(15), np.log(1000), 16))).astype('int').tolist()
      jet_pt: [110, 120, 170, 220, 300, 400, 700, 1000]
      jet_eta: [-2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5]
   ###reweight_classes: [label_catB, label_catC, label_uds, label_g, label_undef, label_pu]
   #reweight_classes: [label_b, label_bb, label_c, label_cc, label_catB, label_catC, label_uds, label_g, label_undef]
   reweight_classes: [label_b, label_bb, label_c, label_cc, label_catB, label_catC, label_uds, label_g]
   class_weights: [1, 2.5, 1, 2.5, 5, 5, 2.5, 2.5]
   reweight_threshold: 15
   reweight_hists:
